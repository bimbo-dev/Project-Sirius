@model Sirius.Web.Models.AppraisalDimensionViewModel
@using Sirius.Web.Helpers.IdentityHelpers

@section styles{
    @Styles.Render("~/toastr/css")
    @Styles.Render("~/sweetalert/css")
    @Styles.Render("~/ionRangeSlider/css")
}

@{
    ViewBag.Active = "a_competencies";
    ViewBag.Title = "Appraisal Dimensions";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<div class="row">
    @Html.Partial("_AppraisalSettingsMenuPartial")

    <div class="col-md-9">
        <div class="alert alert-info alert-dismissable">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <h4><i class="icon fa fa-info"></i> Job Role Competencies </h4>
            <h4>Quality and Quantity of work (tasks) has been taken care of.</h4>
        </div>
        <div class="info-box">
            <a data-toggle="modal" href="#addDimension"><span class="info-box-icon bg-purple"><i class="fa fa-plus"></i><br /> <small style="color:white;">New Task</small></span></a>
            <div class="info-box-content">
                <h3>Job Competencies</h3>
            </div><!-- /.info-box-content -->
        </div>

        <div class="box box-solid">
            <div class="box-header with-border">
                <h3 class="box-title">List of Appraisal Dimensions</h3>
                <div class="box-tools pull-right">
                    <a data-toggle="modal" href="#addDimension" class="btn btn-flat btn-sm bg-purple"><i class="fa fa-plus"></i> New Competency</a>
                </div>
            </div><!-- /.box-header -->
            <div class="box-body">
            @if (Model.Dimensions.Count() == 0)
            {
                <div class="callout callout-info">
                    <h4>There are no job role competencies in @User.Identity.GetUserOrganizationShortname().ToUpper()</h4>
                </div>
            }
            else
            {
                <div class="box-group" id="accordion">
                    <!-- we are adding the .panel class so bootstrap.js collapse plugin detects it -->
                    @foreach (var dimension in Model.Dimensions)
                    {
                        <div class="panel box">
                            <div class="box-header with-border">
                                <h4 class="box-title">
                                    <a data-toggle="collapse" data-parent="#accordion" href="#collapse_@dimension.HtmlId">
                                        <i class="fa fa-plus-square-o"></i>
                                        @dimension.DimensionName
                                    </a>
                                </h4>
                                <div class="box-tools pull-right">
                                    @*@if (Model.IsAppraisalPeriod)
                                    {
                                        <a data-toggle="tooltip" title="You cannot modify this settings during an appraisal period" data-placement="left" disabled class="btn btn-warning btn-sm btn-flat"><i class="fa fa-edit"></i> Edit</a>
                                        <a disabled class="btn btn-danger btn-sm btn-flat"><i class="fa fa-trash"></i></a>
                                    }
                                    else
                                    {*@
                                        <a data-toggle="modal" href="#editDimension_@dimension.HtmlId" class="btn btn-warning btn-sm btn-flat"><i class="fa fa-edit"></i> Edit</a>
                                        <a data-href="#" class="btn btn-danger btn-sm btn-flat"><i class="fa fa-trash"></i></a>
                                    
                                </div>
                            </div>
                            <div id="collapse_@dimension.HtmlId" class="panel-collapse collapse">
                                <div class="box-body">
                                    <div class="col-md-12">
                                        <h5>PERFORMANCE INDICATORS</h5>
                                        <p class="text-muted well well-sm no-shadow" style="margin-top: 10px;">
                                            @dimension.PerformanceIndicators
                                    </div>

                                    <div class="col-md-12">
                                        <div class=row>

                                            <div class="col-md-6">
                                                <h5>Maximum Score</h5>
                                                <div class="callout callout-warning">
                                                    <h4>Maximum score for this dimension - @dimension.MaxScore</h4>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrWhiteSpace(dimension.Description))
                                    {
                                        <div class="col-md-12">
                                            <h5>DESCRIPTION:</h5>
                                            <p class="text-muted well well-sm no-shadow" style="margin-top: 10px;">
                                                @dimension.Description
                                            </p>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="modal fade" id="editDimension_@dimension.HtmlId" role="dialog">
                                @{ Html.RenderAction("EditDimension", new { dimensionId = dimension.DimensionId }); }
                            </div>
                        </div>
                    }
                </div>
            }
                
            </div><!-- /.box-body -->
        </div><!-- /.box -->

    </div>
    @Html.HiddenFor(m => m.OrganizationId, new { id = "orgId" })
</div>

<div class="modal fade" id="addDimension" role="dialog">
    @{ Html.RenderAction("AddDimension", "PM"); }
</div>


@section scripts{
    @Scripts.Render("~/ionRangeSlider/js")
    @Scripts.Render("~/toastr/js")
    @Scripts.Render("~/sweetalert/js")

    <script type="text/javascript">

        $(document).ready(function () {
            var $rangeAdd = $("input#range_Add"),
                $from = $("input#addRangeValue");

            $rangeAdd.ionRangeSlider({
                min: 5,
                max: 100,
                from: $from.prop("value"),
                type: 'single',
                step: 5,
                postfix: "",
                prettify: true,
                hasGrid: true,
                onStart: update,
                onChange: update,
                onFinish: update
            });

            function update(data) {
                $from.prop("value", data.from);
            }
            
        });

        $(document).ready(function () {
            var orgId = $("#orgId").val();
            var url = '/api/organizationapi/dimensions?organizationId=' + orgId;
            $.ajax({
                url: url,
                dataType: "json",
                type: "GET",
                cache: false,
                beforeSend: function () {
                },
                success: function (data) {
                    $.each(data, function (key, val) {
                        var $rangeEdit = $("input#rangeEdit_" + val.HtmlId),
                            $inputFrom = $("input#rangeValue_" + val.HtmlId);

                        $rangeEdit.ionRangeSlider({
                            min: 5,
                            max: 100,
                            from: $inputFrom.prop("value"),
                            type: 'single',
                            step: 5,
                            postfix: "",
                            prettify: true,
                            hasGrid: true,
                            onStart: updateInputs,
                            onChange: updateInputs,
                            onFinish: updateInputs
                        });

                        function updateInputs(response) {
                            $inputFrom.prop("value", response.from);
                        }
                    })
                },
                error: function () {

                }
            });

        });


        function editBegin() {
            $('#editDimensionButton').attr('disabled', 'disabled');
        }
        function editComplete() {
            $('#editDimensionButton').removeAttr('disabled');
        }
        function editSuccess(response) {
            if (response.Successful) {
                toastr.success(response.Html);
                $('.modal').modal('hide');
                setTimeout(function () {
                    window.location.reload(true);
                }, 2000);
            }
            else {
                toastr.error(response.Html);
            }
        }
        function editFailure() {
            toastr.error("An error occured while processing your request, Please Try Again");
        }

        function addBegin() {
            $('#addDimensionButton').attr('disabled', 'disabled');
        }
        function addComplete() {
            $('#addDimensionButton').removeAttr('disabled');
        }
        function addSuccess(response) {
            if (response.Successful) {
                toastr.success(response.Html);
                $('.modal').modal('hide');
                setTimeout(function () {
                    window.location.reload(true);
                }, 2000);
            }
            else {
                toastr.error(response.Html);
            }
        }
        function addFailure() {
            toastr.error("An error occured while processing your request, Please Try Again");
        }
</script>

}